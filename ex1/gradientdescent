function [theta, J_history] = gradientdescent(X, y, theta, alpha, iters)
m = length(y); 
J_history = zeros(num_iters, 1);

for iter = 1:iters %iteration implementation
  number_of_thetas = length(theta);
  new_theta = zeros(number_of_thetas,1);
  for j = 1:number_of_thetas
    sum_of_prediction_deviations = 0;
    for i = 1:m
      h(x)=X*theta
      hx = X(i,:) * theta;
      prediction_deviation = (hx - y(i,:))*X(i,j);
      sum_of_prediction_deviations = sum_of_prediction_deviations + prediction_deviation;
    end
    new_theta(j) = theta(j) - (alpha/m)*sum_of_prediction_deviations;
   end
  theta = new_theta;
  
  derivate = (X'*(X*theta - y))/m; %vectorized implementation
  theta = theta - alpha*derivate;
  
  cost = computeCost(X, y, theta); %saving J for each iteration
  J_history(iter) = cost;
  
end
